# generated by fastapi-codegen:
#   filename:  holy_grail_api.json
#   timestamp: 2023-07-02T14:44:40+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI

from .models import (
    Error,
    Movie,
    Quote,
    Quotes,
    SceneNumberOrName,
    SceneWithQuotes,
    Tops,
    User,
    UsersIdTopsPostRequest,
    UsersPostRequest,
)

app = FastAPI(
    title='MONTY PYTHON BEST QUOTES API',
    version='1.0.0',
    description="With this API you can get quotes/scenes from 3 Monty Python movies: 'Life of Brian', 'The Meaning of ' and 'Monty Python and The Holy Grail'. \nUser can get a quote or a whole scene. To find a specfic quote the user can use part of this quote, scene name/number and movie name. If the user registers with this API, they can also create their top favourite quotes list.",
)


@app.get(
    '/movies',
    response_model=Movie,
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['movies'],
)
def get_movies() -> Union[Movie, Error]:
    """
    Get a list of available to get quotes movies
    """
    pass


@app.get(
    '/quotes/random',
    response_model=Quote,
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['quotes'],
)
def get_quotes_random() -> Union[Quote, Error]:
    """
    Get a random quote
    """
    pass


@app.get(
    '/quotes/search',
    response_model=Quotes,
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['quotes'],
)
def get_quotes_search(text: Optional[str] = None) -> Union[Quotes, Error]:
    """
    Get a quote or quotes by quote's part
    """
    pass


@app.get(
    '/scenes/random',
    response_model=SceneWithQuotes,
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['scenes'],
)
def get_scenes_random() -> Union[SceneWithQuotes, Error]:
    """
    Get a random scene
    """
    pass


@app.get(
    '/scenes/search',
    response_model=SceneWithQuotes,
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['scenes'],
)
def get_scenes_search(
    movie: str,
    scene_number: Optional[int] = None,
    scene_name: Optional[str] = None,
    scene_number_or_name: Optional[SceneNumberOrName] = None,
) -> Union[SceneWithQuotes, Error]:
    """
    Search for a whole scene (all quotes) by scene's number/name and movie
    """
    pass


@app.post(
    '/users', response_model=User, responses={'400': {'model': Error}}, tags=['users']
)
def post_users(body: UsersPostRequest) -> Union[User, Error]:
    """
    Create a new user
    """
    pass


@app.get(
    '/users/{id}/tops',
    response_model=Tops,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '404': {'model': Error},
    },
    tags=['users'],
)
def get_users_id_tops(id: int) -> Union[Tops, Error]:
    """
    Get user's top quotes
    """
    pass


@app.post(
    '/users/{id}/tops',
    response_model=Tops,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '404': {'model': Error},
    },
    tags=['users'],
)
def post_users_id_tops(
    id: int, body: UsersIdTopsPostRequest = ...
) -> Union[Tops, Error]:
    """
    Add a quote to user's top quotes
    """
    pass
