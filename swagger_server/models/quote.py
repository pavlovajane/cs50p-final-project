# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.movie import Movie  # noqa: F401,E501
from swagger_server.models.scene import Scene  # noqa: F401,E501
from swagger_server import util


class Quote(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, movie: Movie=None, scene: Scene=None, type: str=None, character: str=None, quote: str=None):  # noqa: E501
        """Quote - a model defined in Swagger

        :param id: The id of this Quote.  # noqa: E501
        :type id: int
        :param movie: The movie of this Quote.  # noqa: E501
        :type movie: Movie
        :param scene: The scene of this Quote.  # noqa: E501
        :type scene: Scene
        :param type: The type of this Quote.  # noqa: E501
        :type type: str
        :param character: The character of this Quote.  # noqa: E501
        :type character: str
        :param quote: The quote of this Quote.  # noqa: E501
        :type quote: str
        """
        self.swagger_types = {
            'id': int,
            'movie': Movie,
            'scene': Scene,
            'type': str,
            'character': str,
            'quote': str
        }

        self.attribute_map = {
            'id': 'id',
            'movie': 'movie',
            'scene': 'scene',
            'type': 'type',
            'character': 'character',
            'quote': 'quote'
        }
        self._id = id
        self._movie = movie
        self._scene = scene
        self._type = type
        self._character = character
        self._quote = quote

    @classmethod
    def from_dict(cls, dikt) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quote of this Quote.  # noqa: E501
        :rtype: Quote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Quote.


        :return: The id of this Quote.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Quote.


        :param id: The id of this Quote.
        :type id: int
        """

        self._id = id

    @property
    def movie(self) -> Movie:
        """Gets the movie of this Quote.


        :return: The movie of this Quote.
        :rtype: Movie
        """
        return self._movie

    @movie.setter
    def movie(self, movie: Movie):
        """Sets the movie of this Quote.


        :param movie: The movie of this Quote.
        :type movie: Movie
        """

        self._movie = movie

    @property
    def scene(self) -> Scene:
        """Gets the scene of this Quote.


        :return: The scene of this Quote.
        :rtype: Scene
        """
        return self._scene

    @scene.setter
    def scene(self, scene: Scene):
        """Sets the scene of this Quote.


        :param scene: The scene of this Quote.
        :type scene: Scene
        """

        self._scene = scene

    @property
    def type(self) -> str:
        """Gets the type of this Quote.


        :return: The type of this Quote.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Quote.


        :param type: The type of this Quote.
        :type type: str
        """
        allowed_values = ["dialogue", "direction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def character(self) -> str:
        """Gets the character of this Quote.


        :return: The character of this Quote.
        :rtype: str
        """
        return self._character

    @character.setter
    def character(self, character: str):
        """Sets the character of this Quote.


        :param character: The character of this Quote.
        :type character: str
        """

        self._character = character

    @property
    def quote(self) -> str:
        """Gets the quote of this Quote.


        :return: The quote of this Quote.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote: str):
        """Sets the quote of this Quote.


        :param quote: The quote of this Quote.
        :type quote: str
        """

        self._quote = quote
